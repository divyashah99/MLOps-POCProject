name: MLOps CI/CD

on:
  push:
    branches:
      - main
  
  workflow_dispatch: # Run manually

jobs:
  setup-and-upload:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9.13'
    
    - name: Get cache dir 
      id: pip-cache-dir
      run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ${{ steps.pip-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Authenticate with GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_KEY_JSON }}'

    - name: Set GCP Project ID
      run: gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

    - name: Run Data Pipeline
      run: |
        python scripts/setup_gcloud.py
        python scripts/download_data.py
        python scripts/upload_to_bucket.py

  training:
    runs-on: ubuntu-latest
    needs: setup-and-upload # Ensures this job runs after setup-and-upload job

    env:
      REGION: us-central1 # Replace with your desired GCP region

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Authenticate with GCP
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_KEY_JSON }}'

    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev


    - name: Build and Push Docker Image
      env:
          IMAGE_NAME: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mlops-training/model-image
          MODEL_VERSION: v1.0.0
      run: |
          docker build -f docker/Dockerfile -t ${IMAGE_NAME}:${MODEL_VERSION} .
          docker push ${IMAGE_NAME}:${MODEL_VERSION}
          docker tag ${IMAGE_NAME}:${MODEL_VERSION} ${IMAGE_NAME}:latest
          docker push ${IMAGE_NAME}:latest

    - name: Submit Training Job
      run: |
        gcloud ai custom-jobs create \
          --region=${{ secrets.GCP_REGION }} \
          --display-name=mlops-training-job \
          --worker-pool-spec=machine-type=n1-standard-4,replica-count=1,container-image-uri=${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mlops-training/model-image:latest


    # - name: Build and Push Docker Image
    #   run: |
    #     docker build -f docker/Dockerfile -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/mlops-training:latest .
    #     docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/mlops-training:latest

    # - name: Build and Push Docker Image
    #   env:
    #     IMAGE_NAME: ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_REPOSITORY_NAME }}/mlops-training
    #     MODEL_VERSION: "v1" # You can make this dynamic based on your needs
    #   run: |
    #     docker build -t ${IMAGE_NAME}:${MODEL_VERSION} .
    #     docker push ${IMAGE_NAME}:${MODEL_VERSION}
    #     docker tag ${IMAGE_NAME}:${MODEL_VERSION} ${IMAGE_NAME}:latest
    #     docker push ${IMAGE_NAME}:latest

    # - name: Submit Training Job
    #   run: |
    #     gcloud ai custom-jobs create \
    #       --region=us-central1 \
    #       --display-name=mlops-training-job \
    #       --worker-pool-spec=machine-type=n1-standard-4,replica-count=1,container-image-uri=gcr.io/${{ secrets.GCP_PROJECT_ID }}/mlops-training:latest
